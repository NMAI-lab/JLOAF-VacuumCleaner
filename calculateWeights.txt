public HashMap<String,Double> calculateWeights(CaseBase casebase){
		HashMap<String,Double> weights = new HashMap<String,Double>();
		
		ArrayList<Case> cases1 =new ArrayList<Case>(casebase.getCases());
		ArrayList<Case> cases = new ArrayList<Case>();
		for(int i=0;i<5;i++){
			cases.add(cases1.get(i));
		}
		
		Case baseCase = cases.remove(0);
		int size =cases.size();
		System.out.println(size);
		while(cases.size()>size-1){
			
			for(Case c:cases){
				String inpName = returnLeastSimilar(c,baseCase);
				Double value=weights.get(inpName);
				if (value==null){
					value =0.0;
				}	
				weights.put(inpName,value +sameAction(c,baseCase));		
			}
			
			
				baseCase =cases.remove(0);
		}
		
		
		return weights; 
		
	}

	private String returnLeastSimilar(Case c, Case baseCase) {
		ComplexInput cplx1 = (ComplexInput)c.getInput();
		ComplexInput cplx2 = (ComplexInput)c.getInput();
		
		Set<String> keys = cplx1.getChildNames();
		Set<String> keys2 = cplx2.getChildNames();
		
		String least="";
		double sim=Double.MAX_VALUE;
		for(String s: keys){
			double temp=cplx1.get(s).similarity(cplx2.get(s));
			if(sim>temp){
				sim = temp;
				least= s;
				
			}
		}
		return least;
		
	}

	private int sameAction(Case c, Case baseCase) {
		if(c.getAction().getName().equals(baseCase.getAction().getName())){
			return -1;
		}
		return +1;
	}
	