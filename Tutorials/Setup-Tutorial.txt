How to create a VacuumCleaner using the jLOAF framework

1) Create a VacuumCleanerAgent that extends Agent
  - override run(Input input) and train(CaseBase casebase) methods
  - run(Input input) runs selectAction(input) on the reasoner to get the predicted action
  - train(CaseBase casebase) assigns casebase to cb and creates the reasoner
  
2) Create VacuumCleanerAction that extends AtomicAction
  - the contructor takes a string and calls the super constructor
  -create an Enum called Actions that has all the possible actions of the vacuumcleaner
  
3) Create a VacuumCleanerInput that extends ComplexInput
  - the constructor takes a string and a similarityMetricStrategy and calls the super constructor

4) Create an Enum that has all the inputs name with a corresponding ComplexInput
  
5) Create a VacuumCleanerMotorControl and VacuumCleanerPerception that extend MotorControl and Perception
  - The methods in these are not defined since in the current state they are not used.
  - Generally motorcontrol handles taking the action and interacting with the game environment
  - Generally Perception handles converting a enviornment state into a understandable input for the agent
  
6) Create a class that converts the Log File into a casebase
  - The log file contains 9 columns and a 1000 rows
  - The first 8 columns of each row represent the inputs of the VacuumCleaner
  - The last column represents the Action correspnding to the inputs.
  - each column is seperated by a comma
  - a scanner is used to parse the log file, taking each two columns at a time
  - for every two columns selected, a complexInput is created, with two AtomicInputs, which take the values of the two columns selected.
  - at the end, a VacuumCleanerInput is created whihc has four complexInputs, where each has two AtomicInputs.
  - The last columns is converted to an action.
  - the action is selected from the Actions Enum, since the last column is a value that varies between 1 and 5
  - the index of the enum element corresponds to the right Action of the value of the last column
  - a case is then created from the VacuumCleanerInput and VacuumCleanerAction created
  -then the case is added to the main casebase
  -at the end the casebase is written to an output file.	
	
  
7) Create a PerformanceTest class that extends PerformanceEvaluator
  - Override createAgent() and createArrayOfCaseBaseNames(String [] filenames)
  - createAgent() is used to instantiate a VacuumCleanerAgent
  - createArrayOfCaseBaseNames(String [] filenames) takes a string [] of logfiles names, converts each log file into
  - a CaseBase and returns a string [] of CaseBase names
  - Create a new PerformanceTest object in the main method 
  - Call PerfromanceEvaluatorMethod(String [] filenames, String Preprocessing)
  - This will perform leaveOne out testing for each casebase provided and print out the metrics
  - It will also output them to a .csv file for use in latex